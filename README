Thank you for choosing AZURE2 to for all your R-Matrix needs.

This file contains a brief description of how to compile the AZURE2 package.  


Dependencies:

AZURE2 is compiled using the CMake package.  Version 2.8 or higher of CMake is (probably) required to build AZURE2.  CMake can be downloaded from http://www.cmake.org. Additionally, much of the mathematics in AZURE2 uses the GSL routines.  This library can be obtained from http://www.gnu.org/software/gsl/.  The minimization routines utilized by AZURE are from the Minuit2 package, distributed as part of the ROOT distribution.  If ROOT is compiled from source, the --enable-minuit2 flag must be set when running the configure script.  The libraries are available as a stand-alone package from http://seal.web.cern.ch/seal/snapshot/work-packages/mathlibs/minuit/release/download.html.  It is important to note that the ROOT library DOES NOT build Minuit2 with OpenMP support by default, while the stand-alone version does.  On a multi-core machine the fit process will be much slower without OpenMP.  To build ROOT with OpenMP support for Minuit2, set the enviromnet variables USE_PARALLEL_MINUIT2 and USE_OPENMP prior to building.  The final compile time dependency is Qt.  Qt is a cross-platform interface API, and required to compile the graphical setup program.  While AZURE2 can be compiled without the graphical setup program, this is not recommended. Qt is available from http://qt.nokia.com. Qt 4.4 or greater is required to build AZURE2.


The following steps should be performed to build the AZURE2 package:

1.  Create a subdirectory of the AZURE2 root named build [mkdir build], and change to that directory [cd build].

2.  Run CMake to generate Makefiles from AZURE2 root [cmake ..].  The reference to the parent directory tells CMake where the root of the source tree is located.  

3.  Build the package [make && make install].  The resulting binary will be created in the current directory.


Options:

Compiling options (i.e. switching compilers, etc.) are available with flags to CMake.  See the CMake documentation for more details.

A few options are available to the user when building AZURE2.  The can be passed to cmake using the -D[OPTION]=[VALUE] syntax.  CMake also provides a utility to switch these options ON/OFF.   After an initial configuration of the build directory (step 2 above), the command [ccmake ..] can be run to view and edit the configured options. 

These are:

BUILD_GUI [ON/OFF] - Toggles whether the graphical setup utility is built and linked to AZURE2.  This is ON by default, and it is not recommended to turn it OFF.

USE_QWT [ON/OFF] - Toggles whether the built-in plotting tab is added to AZURE2.  This is OFF by default. The plotting features are recommended but require the additional QWT libraries to be installed on the build system.  

USE_STAT [ON/OFF] - Toggles whether the stat() function should be used to test for properly set directories at start.  This only applied when running AZURE2 in console (--no-gui) mode, and is ON by default.  This function has been seen to not work properly for Windows, and it is recommended to select OFF if building on/for a Windows system.

MINUIT_PATH [dir] - If Minuit2 is in a non-standard path, this will add the directory to the search path.

GSL_PATH [dir] - If GSL is in a non-standard path, this will add the directory to the search path.

After changing options, execute [make clean] and then step 3 above to build/rebuild AZURE2.  

